<?php
/**
 * @file
 * Authcache support for block module.
 */

/**
 * Implements hook_menu().
 */
function authcache_block_menu() {
  $items['admin/config/system/authcache/blocks'] = array(
    'title' => 'Blocks',
    'description' => "View Authcache blocks.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authcache_block_admin_blocks'),
    'access arguments' => array('administer site configuration'),
    'file' => 'authcache_block.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Implements hook_form_alter(),
 */
function authcache_block_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'block_add_block_form':
    case 'block_admin_configure':
      $authcache_block_blocks = variable_get('authcache_block_blocks', array());
      $block_id = "{$form['module']['#value']}-{$form['delta']['#value']}";

      $form['visibility']['authcache_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Authcache Ajax'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'visibility',
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'authcache_block') . '/authcache_block.admin.js'),
        ),
      );
      $form['visibility']['authcache_settings']['authcache'] = array(
        '#type' => 'checkbox',
        '#title' => t('Load block with Ajax on cached Authcache pages'),
        '#description' => t('This is useful for dynamic or user-centric content, however it places additional load on the server.'),
        '#default_value' => (isset($authcache_block_blocks[$block_id])),
      );
      $form['visibility']['authcache_settings']['authcache_lifetime'] = array(
        '#type'  => 'textfield',
        '#title' => t('Minimum cache lifetime'),
        '#description' => t('Enter the number of seconds to locally cache the block in the user\'s browser. This improves performance and prevents jumpiness.'),
        '#field_suffix' => t('seconds'),
        '#size' => 8,
        '#default_value' => (isset($authcache_block_blocks[$block_id])) ? $authcache_block_blocks[$block_id] : 0,
      );
      $form['#submit'][] = 'authcache_block_config_submit';
      break;
  }
}

/**
 * Block submit handler.
 */
function authcache_block_config_submit($form, &$form_state) {
  $module = $form_state['values']['module'];
  $delta  = $form_state['values']['delta'];

  // Adding block
  if ($module == 'block' && !$delta) {
    $delta = db_result(db_query("SELECT bid FROM {boxes} WHERE info = '%s' ORDER BY bid DESC", $form_state['values']['info']));
  }

  $block_id = "$module-$delta";

  $authcache_block_blocks = variable_get('authcache_block_blocks', array());

  if (!$form_state['values']['authcache']) {
    unset($authcache_block_blocks[$block_id]);
  }
  else {
    $lifetime = trim($form_state['values']['authcache_lifetime']);
    $authcache_block_blocks[$block_id] = (is_numeric($lifetime)) ? $lifetime : 0;
  }

  variable_set('authcache_block_blocks', $authcache_block_blocks);

  // Clear browsercache
  authcache_ajax_browsercache_invalidate();

  // Rebuild authcache_ajax registry
  _authcache_ajax_rebuild();
}

/**
 * Process block template variables
 */
function authcache_block_preprocess_block(&$variables) {
  global $user;

  if (authcache_page_is_cacheable()) {
    $block = $variables['block'];

    // User navigation block; use cookie for displaying username.
    if ($block->module == 'user' && $user->uid && $user->name == $block->subject) {
      $variables['block']->subject = '<span class="authcache-user"></span>';
    }

    // Authcache Blocks
    $authcache_block_blocks = variable_get('authcache_block_blocks', array());
    $block_id = "{$block->module}-{$block->delta}";

    if (isset($authcache_block_blocks[$block_id])) {
      $attributes = array();

      $maxage = $authcache_block_blocks[$block_id];
      $request_id = 'blocks-' . $maxage;

      // Max-age (local caching)
      if ($authcache_block_blocks[$block_id]) {
        $attributes['data-block-req'] = $request_id;
      }

      drupal_add_js(drupal_get_path('module', 'authcache_block') . '/authcache_block.js');
      authcache_ajax_add_request('blocks-' . $maxage);

      $attributes['data-block-cid'] = _block_get_cache_id($block);
      $attributes['data-block-id'] = $block_id;

      $subject_attributes = array('id' => 'authcache-block-subj-' . $block_id) + $attributes;
      $content_attributes = array('id' => 'authcache-block-' . $block_id, 'class' => array('authcache-block')) + $attributes;

      $variables['block']->subject = '<span' . drupal_attributes($subject_attributes) . '>' . $variables['block']->subject . '</span>';
      $variables['content'] = '<div' . drupal_attributes($content_attributes) . '></div>';
    }
  }
}

/**
 * Implements hook_authcache_ajax_request().
 */
function authcache_block_authcache_ajax_request() {
  $authcache_block_blocks = variable_get('authcache_block_blocks', array());

  $request = array();
  foreach ($authcache_block_blocks as $ttl) {
    $request['blocks-' . $ttl] = array(
      'q' => TRUE,
      'maxage' => $ttl,
    );
  }

  return $request;
}

/**
 * Implements hook_authcache_ajax_command().
 */
function authcache_block_authcache_ajax_command() {
  return array(
    'blocks' => array(
      'handler' => 'AuthcacheBlockGetCommand',
      'handler config' => array(
        // Full bootstrap required for correct theming.
        'bootstrap' => DRUPAL_BOOTSTRAP_FULL,
      ),
    ),
  );
}
